[ ] - Pick literature
    1. Something about distributed concurrent programming models
     = Tanenbaum, A., Steen, M.: Distributed Systems: Principles and Paradigms. Prentice Hall, 2002, ISBN: 0130888931
    2. Something about actors
     = Agha, Gul A., and Wooyoung Kim. "Actors: A unifying model for parallel and distributed computing." Journal of systems architecture 45.15 (1999): 1263-1277.
    3. Somehting about algorithmic trading
        Architektura podobna:
     = Agopyan, Arden & Åžener, Emrah & Beklen, Ali. (2018). Financial Business Cloud for High-Frequency Trading A Research on Financial Trading Operations with Cloud Computing.



[ ] - Create project structure
 x  1. Code - Cargo project with good structure
 x  2. Thesis - Latex project with autobuild
    3. Ops - NixOS package that automatically builds cargo project

[ ] - Start with text writing
 x  1. Create chapter structure
 x  2. Split up chapters into main sections, with logical flow
 x  3. Write simple introduction to get started

[ ] - Start with code
 x  1. Import old Cryptrader project - Just for reference
 x  2. Create good dependecy chain ( Feature managment )
 x  3. Create actix extension libraries :
 x  3.1 Actix-net - Library for distributed actors on different machines using ZMQ
 x  3.1.1 ZMQ - Find or implement zmq library supporting tokio with futures
 x  3.1.2 NetMessage type - Automatic serialization
    3.1.3 PubSub addresses and actors
    3.2 Actix-arch - Library for basic architectural patterns using Actix-net
    3.2.1 Pub-Sub for messages that don't have responses
    3.2.2 Basic FCFS Load balancing actor with workers
    3.2.3 Hash/Mod sharded load balancing with actor state
    3.2.4 - Idea - Prefix tree load balancing
    3.3 Actix-gov / Actix-manage / actix serv - Library for Service discovery, monitoring, autorestart and general
        managment tasks.

    --- This should be enough for first semester code-wise

[ ] - Test implemented library code compared to Akka
    1. Single machine Message passing performance
    1.1 Basic sequential actor ring (N actors, each actor sends to next one, no message response)
    1.2 Actor stack (N actors , each actor sends to next one, waits for response using Futures)
    1.3 Actor tree(N actors, each actor sends to M next ones, waits for all responses to arrive)
    -- ThreadRing : http://www.theron-library.com/index.php?t=page&p=threadring

    2. Distributed message passing performance : Replicate everything from 1. using 2 processes
        communicating over ZMQ ( TCP Mode ).
    3. ???

[ ] - Write theoretical part of thesis
    1. Distributed & concurrent systems,  problems, solutions, architectures
    2. Actor model
    3. Rust - document why is it used, How actix solves a lot of bugs by using strongly typed messages, etc ...
 x  3.1 Rust itself
    3.2 Actix

[ ] - Document implement library and tests in thesis