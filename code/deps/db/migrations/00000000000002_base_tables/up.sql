create table if not exists pairs
(
    id       integer generated by default as identity primary key,
    exchange varchar not null,
    pair     varchar not null,
    unique (exchange, pair)
);

CREATE OR REPLACE FUNCTION pair_id(varchar, varchar) RETURNS integer as
$$
select id
from pairs
where exchange = $1
  and pair = $2
$$ LANGUAGE SQL STRICT
                IMMUTABLE
                PARALLEL SAFE;


CREATE OR REPLACE FUNCTION make_pair_id(varchar, varchar) RETURNS integer as
$$
with ins as (insert into pairs (exchange, pair)
    values ($1, $2)
    on conflict (exchange,pair) do nothing
    returning id)
select id
from ins
union all
select id
from pairs
where exchange = $1
  and pair = $2
limit 1

$$ LANGUAGE SQL STRICT
                VOLATILE;

CREATE TABLE if not exists ohlc
(
    time    BIGINT           NOT NULL,
    pair_id INTEGER          NOT NULL,

    open    DOUBLE PRECISION NOT NULL,
    high    DOUBLE PRECISION NOT NULL,
    low     DOUBLE PRECISION NOT NULL,
    close   DOUBLE PRECISION NOT NULL,
    vol     DOUBLE PRECISION NOT NULL,

    -- 0 For backfilled/ guessed
    -- 10 for ingest
    -- 20 for stable ingest
    -- 50 for historical data dump
    status  integer          not null default 0,

    PRIMARY KEY (pair_id, time),
    foreign key (pair_id) references pairs (id)
);

-- Chunking performed once per 4 weeks
SELECT create_hypertable('ohlc', 'time', chunk_time_interval => 4 * 7 * 24 * 60 * 60);
